service: () -> {
    addMessage: (text, text) -> (variant {Ok:record {id:text; attachmentURL:text; title:text; body:text; createdAt:text; updatedAt:text}; Err:variant {InvalidPayload:text; DataExist:text; NotFound:text}});
    getKeys: (opt text, opt text) -> (variant {Ok:vec text; Err:variant {InvalidPayload:text; DataExist:text; NotFound:text}}) query;
    getMessage: (text) -> (variant {Ok:record {id:text; attachmentURL:text; title:text; body:text; createdAt:text; updatedAt:text}; Err:variant {InvalidPayload:text; DataExist:text; NotFound:text}}) query;
    getMessages: () -> (variant {Ok:vec record {id:text; attachmentURL:text; title:text; body:text; createdAt:text; updatedAt:text}; Err:variant {InvalidPayload:text; DataExist:text; NotFound:text}}) query;
    http_request: (record {url:text; method:text; body:vec nat8; headers:vec record {text; text}; certificate_version:opt nat16}) -> (record {body:vec nat8; headers:vec record {text; text}; upgrade:opt bool; streaming_strategy:opt variant {Callback:record {token:vec nat8; callback:func (vec nat8) -> (opt record {token:opt vec nat8; body:vec nat8}) query}}; status_code:nat16}) query;
    http_request_update: (record {url:text; method:text; body:vec nat8; headers:vec record {text; text}}) -> (record {body:vec nat8; headers:vec record {text; text}; upgrade:opt bool; streaming_strategy:opt variant {Callback:record {token:vec nat8; callback:func (vec nat8) -> (opt record {token:opt vec nat8; body:vec nat8}) query}}; status_code:nat16});
    resetStore: () -> (variant {Ok:text; Err:variant {InvalidPayload:text; DataExist:text; NotFound:text}});
}
